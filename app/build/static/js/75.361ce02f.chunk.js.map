{"version":3,"sources":["client/index.js","components/CountChart.js","pages/counter/index.js"],"names":["instance","axios","create","baseURL","process","CountChart","title","data","keyword","Helmet","className","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","Counter","useState","setData","language","useParams","useEffect","fetchData","getKeyword","replace","getFormatDate","date","picker","Cookies","get","dates","split","pop","join","a","repositoryEndpoint","startDate","endDate","finalRepositoryEndpoint","REPOSITORY_ENDPOINT","query","repository","start_date","end_date","client","params","response","results","map","item","name","file","folder","total","javascript","java","python","php","console","log","finalResult","_","chain","groupBy","value","key","sumBy","capitalize","words"],"mappings":"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","file":"static/js/75.361ce02f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst instance = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\nexport default instance;\n","import { Helmet } from 'react-helmet'\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts'\nimport React from 'react'\n\nconst CountChart = ({ title, data, keyword }) => (\n  <>\n    <Helmet title={title} />\n    <div className=\"kit__utils__heading\">\n      <h5>\n        <span className=\"mr-3\">{title}</span>\n      </h5>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-lg-12\">\n        {keyword === 'file_and_folder' ? (\n          <LineChart\n            width={1050}\n            height={600}\n            data={data}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"file\" stroke=\"#82ca9d\" />\n            <Line type=\"monotone\" dataKey=\"folder\" stroke=\"#3498db\" />\n          </LineChart>\n        ) : (\n          <LineChart\n            width={1050}\n            height={600}\n            data={data}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n            <Line type=\"monotone\" dataKey=\"javascript\" stroke=\"#82ca9d\" />\n            <Line type=\"monotone\" dataKey=\"java\" stroke=\"#3498db\" />\n            <Line type=\"monotone\" dataKey=\"python\" stroke=\"#9b59b6\" />\n            <Line type=\"monotone\" dataKey=\"php\" stroke=\"#f39c12\" />\n          </LineChart>\n        )}\n      </div>\n    </div>\n  </>\n)\n\nexport default CountChart\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Cookies from 'js-cookie'\nimport { REPOSITORY_ENDPOINT } from 'utils/constants'\nimport client from 'client'\nimport capitalize from 'capitalize'\nimport _ from 'lodash'\n\nimport CountChart from '../../components/CountChart'\n\n/* eslint-disable */\nconst Counter = () => {\n  const [data, setData] = useState([])\n  const { language } = useParams()\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  const getKeyword = () => {\n    return language.replace(/-/g, '_').replace('ing', '')\n  }\n\n  const getFormatDate = date => {\n    const picker = Cookies.get('picker')\n    if (picker === 'month') {\n      const dates = date.split('-')\n      dates.pop()\n      return dates.join('-')\n    } else if (picker === 'year') {\n      const dates = date.split('-')\n      dates.pop()\n      dates.pop()\n      return dates.join('-')\n    }\n    return date\n  }\n\n  const fetchData = async () => {\n    const repositoryEndpoint = Cookies.get('repositoryEndpoint')\n    const startDate = Cookies.get('startDate')\n    const endDate = Cookies.get('endDate')\n    const keyword = getKeyword()\n    const finalRepositoryEndpoint = repositoryEndpoint || REPOSITORY_ENDPOINT\n    const query = { repository: finalRepositoryEndpoint }\n    if (startDate && endDate) {\n      query.start_date = startDate\n      query.end_date = endDate\n    }\n    const response = await client.get(`/language/${keyword}`, { params: query })\n    const results =\n      keyword === 'file_and_folder'\n        ? response.data.map(item => ({\n            name: getFormatDate(item.date),\n            file: item.file,\n            folder: item.folder,\n          }))\n        : response.data.map(item => ({\n            name: getFormatDate(item.date),\n            total: item.total,\n            javascript: item.javascript,\n            java: item.java,\n            python: item.python,\n            php: item.php,\n          }))\n    console.log(results)\n    const finalResult = _.chain(results)\n      .groupBy('name')\n      .map((value, key) => ({\n        name: key,\n        file: _.sumBy(value, 'file'),\n        folder: _.sumBy(value, 'folder'),\n        total: _.sumBy(value, 'total'),\n        javascript: _.sumBy(value, 'javascript'),\n        java: _.sumBy(value, 'java'),\n        python: _.sumBy(value, 'python'),\n        php: _.sumBy(value, 'php'),\n      }))\n      .value()\n\n    setData(finalResult)\n  }\n\n  const title = capitalize.words(language.split('-').join(' '))\n  const keyword = getKeyword()\n  return <CountChart title={title} data={data} keyword={keyword} />\n}\n\nexport default Counter\n"],"sourceRoot":""}